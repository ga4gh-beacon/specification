

//A Beacon is a web service for genetic data sharing that can be queried for 
//information about specific alleles.


syntax = "proto3";

package beacon;

import "google/protobuf/struct.proto";




//Query for information about a specific allele.

//Based on `org.ga4gh.models.Variant`.

message BeaconAlleleRequest {
  
  //Reference name (chromosome).

  //Accepted values: 1-22, X, Y.
  
  string referenceName = 1;

  
  //Position, allele locus (0-based).

  //Accepted values: non-negative integers smaller than reference length.
  
  int64 start = 2;

  //Reference bases for this variant (starting from `start`).

  //Accepted values: see the REF field in VCF 4.2 specification
  //(https://samtools.github.io/hts-specs/VCFv4.2.pdf).
  string referenceBases = 3;

  //The bases that appear instead of the reference bases.

  //Accepted values: see the ALT field in VCF 4.2 specification
  //(https://samtools.github.io/hts-specs/VCFv4.2.pdf).
  string alternateBases = 4;


  //Assembly identifier (GRC notation, e.g. `GRCh37`). 
  string assemblyId = 5;

  //Identifiers of datasets, as defined in `BeaconDataset`.

  //If this field is null/not specified, all datasets should be queried.
  string datasetIds = 6;


  //Indicator of whether responses for individual datasets
  //(`datasetAlleleResponses`) should be included (not null) in the response
  //(`BeaconAlleleResponse`) to this request.

  //If null (not specified), the default value of false is assumed.
  bool includeDatasetResponses = 7;
}

// Dataset of a beacon. 
message BeaconDataset {
  // Unique identifier of the dataset. 
  string id = 1;

  // Name of the dataset. 
  string name = 2;

  // Description of the dataset. 
  string description = 3;

  // Assembly identifier (GRC notation, e.g. `GRCh37`).
  string assemblyId = 4;

  // The time the dataset was created (ISO 8601 format). 
  string createDateTime = 5;

  // The time the dataset was updated in (ISO 8601 format). 
  string updateDateTime = 6;

  // Version of the dataset. 
  string version = 7;

  // Total number of variants in the dataset. 
  int64 variantCount = 8;

  // Total number of calls in the dataset. 
  int64 callCount = 9;

  // Total number of samples in the dataset. 
  int64 sampleCount = 10;

  // URL to an external system providing more dataset information (RFC 3986 format). 
  string externalUrl = 11;

  // Additional structured metadata, key-value pairs. 
  map<string, google.protobuf.ListValue> info = 12;
}

// Organization owning a beacon. 
message BeaconOrganization {
  // Unique identifier of the organization. 
  string id = 1;

  // Name of the organization. 
  string name = 2;

  // Description of the organization. 
  string description = 3;

  // Address of the organization. 
  string address = 4;

  // URL of the website of the organization (RFC 3986 format). 
  string welcomeUrl = 5;


  //URL with the contact for the beacon operator/maintainer, e.g. link to
  //a contact form (RFC 3986 format) or an email (RFC 2368 format).
  
  string contactUrl = 6;

  
  //URL to the logo (PNG/JPG format) of the organization (RFC 3986 format).
  
  string logoUrl = 7;

  // Additional structured metadata, key-value pairs. 
  map<string, google.protobuf.ListValue> info = 8;
}

// Beacon. 
message Beacon {
  // Unique identifier of the beacon. 
  string id = 1;

  // Name of the beacon. 
  string name = 2;

  // Version of the API provided by the beacon. 
  string apiVersion = 3;

  // Organization owning the beacon. 
  BeaconOrganization organization = 4;

  // Description of the beacon. 
  string description = 5;

  // Version of the beacon. 
  string version = 6;

  // URL to the welcome page for this beacon (RFC 3986 format). 
  string welcomeUrl = 7;

  
  //Alternative URL to the API, e.g. a restricted version of this beacon
  //(RFC 3986 format).
  
  string alternativeUrl = 8;

  // The time the beacon was created (ISO 8601 format). 
  string createDateTime = 9;

  // The time the beacon was updated in (ISO 8601 format). 
  string updateDateTime = 10;

  
  //Datasets served by the beacon. Any beacon should specify at least one
  //dataset.
  
  repeated BeaconDataset datasets = 11;

  
  //Examples of interesting queries, e.g. a few queries demonstrating different
  //responses.
  
  repeated BeaconAlleleRequest sampleAlleleRequests = 12;

  // Additional structured metadata, key-value pairs. 
  map<string, google.protobuf.ListValue> info = 13;
}

// Beacon-specific error representing an unexpected problem. 
message BeaconError {
  // Numeric error code. 
  int32 errorCode = 1;

  // Error message. 
  string message = 2;
}

// Dataset's response to a query for information about a specific allele. 
message BeaconDatasetAlleleResponse {
  // Identifier of the dataset, as defined in `BeaconDataset`. 
  string datasetId = 1;

  
  //Indicator of whether the given allele was observed in the dataset.

  //This should be non-null, unless there was an error, in which case
  //`error` has to be non-null.
  
  bool exists = 2;

  
  //Dataset-specific error.

  //This should be non-null in exceptional situations only, in which case
  //`exists` has to be null.
  
  BeaconError error = 3;

  // Frequency of this allele in the dataset. Between 0 and 1, inclusive. 
  double frequency = 4;

  // Number of variants matching the allele request in the dataset. 
  int64 variantCount = 5;

  // Number of calls matching the allele request in the dataset. 
  int64 callCount = 6;

  // Number of samples matching the allele request in the dataset. 
  int64 sampleCount = 7;

  // Additional note or description of the response. 
  string note = 8;

  
  //URL to an external system, such as a secured beacon or a system providing
  //more information about a given allele (RFC 3986 format).
  
  string externalUrl = 9;

  // Additional structured metadata, key-value pairs. 
  map<string, google.protobuf.ListValue> info = 10;
}

// Beacon's response to a query for information about a specific allele. 
message BeaconAlleleResponse {
  // Identifier of the beacon, as defined in `Beacon`. 
  string beaconId = 1;

  
  //Indicator of whether the given allele was observed in any of the datasets
  //queried.

  //This should be non-null, unless there was an error, in which case
  //`error` has to be non-null.
  
  bool exists = 2;


  //Beacon-specific error.

  //This should be non-null in exceptional situations only, in which case
  //`exists` has to be null.
  
  BeaconError error = 3;

  // Allele request as interpreted by the beacon. 
  BeaconAlleleRequest alleleRequest = 4;

  
  //Indicator of whether the given allele was observed in individual datasets.

  //This should be non-null if `includeDatasetResponses` in the corresponding
  //`BeaconAlleleRequest` is true, and null otherwise.
  
  repeated BeaconDatasetAlleleResponse datasetAlleleResponses = 5;
}


