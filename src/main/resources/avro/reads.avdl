@namespace("org.ga4gh.models")

/**
This file defines the objects used to represent a hierarchy of reads and alignments:

ReadGroupSet >--< ReadGroup --< fragment --< read --< alignment --< linear alignment

* A ReadGroupSet is a logical collection of ReadGroup's.
* A ReadGroup is all the data that's processed the same way by the sequencer.
 There are typically 1-10 ReadGroup's in a ReadGroupSet.
* A *fragment* is a single stretch of a DNA molecule. There are typically
 millions of fragments in a ReadGroup. A fragment has a name (QNAME in BAM
 spec), a length (TLEN in BAM spec), and an array of reads.
* A *read* is a contiguous sequence of bases. There are typically only one or
 two reads in a fragment. If there are two reads, they're known as a mate pair.
 A read has an array of base values, an array of base qualities, and alignment
 information.
* An *alignment* is the way alignment software maps a read to a reference.
 There's one primary alignment, and can be one or more secondary alignments.
 Secondary alignments represent alternate possible mappings.
* A *linear alignment* maps a string of bases to a reference using a single
 CIGAR string. There's one representative alignment, and can be one or more
 supplementary alignments. Supplementary alignments represent linear alignments
 that are subsets of a chimeric alignment.
* A ReadAlignment object is a flattened representation of the bottom layers
 of this hierarchy. There's exactly one such object per *linear alignment*. The
 object contains alignment info, plus fragment and read info for easy access.
*/
protocol Reads {

import idl "common.avdl";
import idl "metadata.avdl";

record Program {
  /** The command line used to run this program. */
  union { null, string } commandLine = null;

  /** The user specified ID of the program. */
  union { null, string } id = null;

  /** The name of the program. */
  union { null, string } name = null;

  /** The ID of the program run before this one. */
  union { null, string } prevProgramId = null;

  /** The version of the program run. */
  union { null, string } version = null;
}

record ReadStats {
  /** The number of aligned reads. */
  union { null, long } alignedReadCount = null;

  /** The number of unaligned reads. */
  union { null, long } unalignedReadCount = null;

  /**
  The total number of bases.
  This is equivalent to the sum of `alignedSequence.length` for all reads.
  */
  union { null, long } baseCount = null;
}

record ReadGroup {

  /** The read group ID. */
  string id;

  /** The ID of the dataset this read group belongs to. */
  union { null, string } datasetId = null;

  /** The read group name. */
  union { null, string } name = null;

  /** The read group description. */
  union { null, string } description = null;

  /** The sample this read group's data was generated from. */
  union { null, string } sampleId;

  /** The experiment used to generate this read group. */
  union { null, Experiment } experiment;

  /** The predicted insert size of this read group. */
  union { null, int } predictedInsertSize = null;

  /**
  The time at which this read group was created in milliseconds from the epoch.
  */
  union { null, long } created = null;

  /**
  The time at which this read group was last updated in milliseconds
  from the epoch.
  */
  union { null, long } updated = null;

  /** Statistical data on reads in this read group. */
  union { null, ReadStats } stats = null;

  /** The programs used to generate this read group. */
  array<Program> programs = [];

  /**
  The reference set the reads in this read group are aligned to.
  Required if there are any read alignments.
  */
  union {null, string } referenceSetId = null;

  /**
  A map of additional read group information.
  */
  map<array<string>> info = {};
}

record ReadGroupSet {
  /** The read group set ID. */
  string id;

  /** The ID of the dataset this read group set belongs to. */
  union { null, string } datasetId = null;

  /** The read group set name. */
  union { null, string } name = null;

  /** Statistical data on reads in this read group set. */
  union { null, ReadStats } stats = null;

  /** The read groups in this set. */
  array<ReadGroup> readGroups = [];

  // NB: we require that all readgroups in the set are mapped to the same
  // referenceSet.
}

/** A linear alignment can be represented by one CIGAR string. */
record LinearAlignment {
  /** The position of this alignment. */
  Position position;

  /**
  The mapping quality of this alignment. Represents how likely
  the read maps to this position as opposed to other locations.
  */
  union { null, int } mappingQuality = null;

  /**
  Represents the local alignment of this sequence (alignment matches, indels, etc)
  versus the reference.
  */
  array<CigarUnit> cigar = [];
}

/**
A fragment represents a contiguous stretch of a DNA or RNA molecule. Reads can
be associated with a fragment to specify they derive from the same molecule.
*/
record Fragment {

  /** The fragment ID. */
  string id;

}

/**
Each read alignment describes an alignment with additional information
about the fragment and the read. A read alignment object is equivalent to a
line in a SAM file.
*/
record ReadAlignment {

  /**
  The read alignment ID. This ID is unique within the read group this
  alignment belongs to. This field may not be provided by all backends.
  Its intended use is to make caching and UI display easier for
  genome browsers and other light weight clients.
  */
  union { null, string } id;

  /**
  The ID of the read group this read belongs to.
  (Every read must belong to exactly one read group.)
  */
  string readGroupId;

  // fragment attributes
  
  /** The fragment ID that this ReadAlignment belongs to. */
  string fragmentId;

  /** The fragment name. Equivalent to QNAME (query template name) in SAM.*/
  string fragmentName;

  /**
  The orientation and the distance between reads from the fragment are
  consistent with the sequencing protocol (equivalent to SAM flag 0x2)
  */
  union { null, boolean } properPlacement = null;

  /** The fragment is a PCR or optical duplicate (SAM flag 0x400) */
  union { null, boolean } duplicateFragment = null;

  /** The number of reads in the fragment (extension to SAM flag 0x1) */
  union { null, int } numberReads = null;

  /** The observed length of the fragment, equivalent to TLEN in SAM. */
  union { null, int } fragmentLength = null;

  // read attributes

  /**
  The read number in sequencing. 0-based and less than numberReads. This field
  replaces SAM flag 0x40 and 0x80.
  */
  union { null, int } readNumber = null;

  /** SAM flag 0x200 */
  union { null, boolean } failedVendorQualityChecks = null;

  /**
  The alignment for this alignment record. This field will be null if the read
  is unmapped.
  */
  union { null, LinearAlignment } alignment = null;

  /**
  Whether this alignment is secondary. Equivalent to SAM flag 0x100.
  A secondary alignment represents an alternative to the primary alignment
  for this read. Aligners may return secondary alignments if a read can map
  ambiguously to multiple coordinates in the genome.

  By convention, each read has one and only one alignment where both
  secondaryAlignment and supplementaryAlignment are false.
  */
  union { null, boolean } secondaryAlignment = null;

  /**
  Whether this alignment is supplementary. Equivalent to SAM flag 0x800.
  Supplementary alignments are used in the representation of a chimeric
  alignment. In a chimeric alignment, a read is split into multiple
  linear alignments that map to different reference contigs. The first
  linear alignment in the read will be designated as the representative alignment;
  the remaining linear alignments will be designated as supplementary alignments.
  These alignments may have different mapping quality scores.

  In each linear alignment in a chimeric alignment, the read will be hard clipped.
  The `alignedSequence` and `alignedQuality` fields in the alignment record will
  only represent the bases for its respective linear alignment.
  */
  union { null, boolean } supplementaryAlignment = null;

  /**
  The bases of the read sequence contained in this alignment record.
  `alignedSequence` and `alignedQuality` may be shorter than the full read sequence
  and quality. This will occur if the alignment is part of a chimeric alignment,
  or if the read was trimmed. When this occurs, the CIGAR for this read will
  begin/end with a hard clip operator that will indicate the length of the excised sequence.
  */
  union { null, string } alignedSequence = null;

  /**
  The quality of the read sequence contained in this alignment record.
  `alignedSequence` and `alignedQuality` may be shorter than the full read sequence
  and quality. This will occur if the alignment is part of a chimeric alignment,
  or if the read was trimmed. When this occurs, the CIGAR for this read will
  begin/end with a hard clip operator that will indicate the length of the excised sequence.
  */
  array<int> alignedQuality = [];

  /**
  The mapping of the primary alignment of the `(readNumber+1)%numberReads`
  read in the fragment. It replaces mate position and mate strand in SAM.
  */
  union { null, Position } nextMatePosition = null;

  /**
  A map of additional read alignment information.
  */
  map<array<string>> info = {};
}

}
